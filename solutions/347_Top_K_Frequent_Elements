class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> num_occurrences_map;
        for (vector<int>::iterator it = nums.begin(); it != nums.end(); ++it) {
            if (num_occurrences_map.count(*it) == 0) {
                num_occurrences_map.insert({*it, 1});
            }
            else {
                num_occurrences_map[*it] += 1;
            }
        }

        vector<vector<int>> nums_with_count(nums.size() + 1, vector<int>());
        for (unordered_map<int, int>::iterator it = num_occurrences_map.begin(); 
        it != num_occurrences_map.end(); 
        ++it) {
            nums_with_count[it->second].push_back(it->first);
        }

        vector<int> solution;
        for (vector<vector<int>>::iterator it = nums_with_count.end() - 1; it != nums_with_count.begin(); --it) {
            if ((*it).empty()) continue;
            for (vector<int>::iterator num = (*it).begin(); num != (*it).end(); ++num) {
                if (solution.size() == k) return solution;
                solution.push_back(*num);
            }
        }

        return solution;
    }
};
